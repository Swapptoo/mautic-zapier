const should = require('should');

const zapier = require('zapier-platform-core');

const App = require('../../index');
const Contact = require('../../entities/contact');
const appTester = zapier.createAppTester(App);

describe('creates', () => {

  describe('create contact', () => {
    it('should create a new contact', (done) => {
      zapier.tools.env.inject();
      const bundle = {
        inputData: {
          firstname: 'John',
          lastname: 'Doe',
          email: 'john@doe.email',
          points: 7,
          tags: 'zapier, api, -deleted'
        },
        authData: {
          baseUrl: process.env.TEST_BASE_URL,
          username: process.env.TEST_BASIC_AUTH_USERNAME,
          password: process.env.TEST_BASIC_AUTH_PASSWORD
        }
      };

      appTester(App.creates.contact.operation.perform, bundle)
        .then((result) => {
          result.firstname.should.equal('John');
          result.lastname.should.equal('Doe');
          result.email.should.equal('john@doe.email');
          result.points.should.equal(7);
          result.tags.should.equal('api,zapier');
          done();
        })
        .catch(done);
    }).timeout(15000);

    it('should clean contact from fake request', (done) => {
      const request = require('../../fixtures/requests/contact.js');
      const contact = new Contact(null, null);
      const cleanContact = contact.cleanContact(request);

      cleanContact.should.eql(require('../../fixtures/samples/contact.js'));
      done();
    });

    it('should not create a new contact when no fields mapped', (done) => {
      zapier.tools.env.inject();
      const bundle = {
        inputData: {}
      };

      appTester(App.creates.contact.operation.perform, bundle)
        .then(() => {
          done('Should not get here');
        })
        .catch((error) => {
          error.message.should.containEql('No fields were mapped. Please fill in a value to some field(s).');
          done();
        });
    });

    it('input fields should not contain autogenerated data', (done) => {
      zapier.tools.env.inject();
      const bundle = {
        authData: {
          baseUrl: process.env.TEST_BASE_URL,
          username: process.env.TEST_BASIC_AUTH_USERNAME,
          password: process.env.TEST_BASIC_AUTH_PASSWORD
        }
      };

      appTester(App.creates.contact.operation.inputFields, bundle)
        .then((result) => {
          result.forEach((field) => field.key.should.not.equal('modifiedByUser'));
          done();
        })
        .catch(done);
    });
  });
});
